@page
@model RazorPagesHolland.Pages.Hollands.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Holland</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holland.DiveDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holland.DiveDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holland.VesselName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holland.VesselName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holland.ROVDiveName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holland.ROVDiveName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holland.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holland.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holland.Latitude)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holland.Latitude)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holland.Longitude)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holland.Longitude)
        </dd>
    </dl>
    <dl class="row">
        <dd class="embedded-item col">
            <div id="player"></div>
        </dd>
        <dd class="embedded-item col">
            <div id="map"></div>
        </dd>
    </dl>
    <div>
        <button id="play" type="button" class="btn btn-secondary">Play</button>

        <button id="stop" type="button" class="btn btn-secondary">Stop</button>

        <button id="pause" type="button" class="btn btn-secondary">Pause</button>
    </div>
</div>
<div>
    <!--<a asp-page="./Edit" asp-route-id="@Model.Holland.ID">Edit</a>-->
    <a asp-page="./Index">Back to List</a>

    @{
        if (!Model.Holland.Surveys.Any())
        {

            <p>no elements</p>
        }

    }
    



</div>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>

<script type="text/javascript">

    function initMap() {

        //get dive location to centre map from survery at index 0:
        var diveLocation = { lat: @Html.Raw(Model.Holland.Surveys.ElementAt(0).Latitude), lng : @Html.Raw(Model.Holland.Surveys.ElementAt(0).Longitude)  };â€¨
        var map = new google.maps.Map(document.getElementById('map'), {
            center: diveLocation,
            zoom: 17,
            mapTypeId: 'terrain'
        });

        // Define the symbol, using one of the predefined paths ('CIRCLE') supplied by the Google Maps JavaScript API.
        var lineSymbol = {
            path: google.maps.SymbolPath.CIRCLE,
            scale: 8,
            strokeColor: '#FFCC00'
        };

    //sample hard-coded coordinates...
    /*
        var rovCoordinates = [
            {lat: 53.192858, lng: -9.673898},
            {lat: 53.192853, lng: -9.673874},
            {lat: 53.179452, lng: -9.903501},
            {lat: 53.100698, lng: -10.252563},
            {lat:53.016901, lng: -10.592038}
        ];
    */

        //get survey coordinates string array from the Page Model
        var rovCoordinates=@Html.Raw(DetailsModel.rovCoordinates);

        var rovPath = [];//declare js empty array

        //iterate the json coordinates pushing each 'stone' to the final path
        for (i = 0; i < rovCoordinates.length; i++){
            var data = rovCoordinates[i];
            var stone =  {lat: parseFloat(data.lat), lng: parseFloat(data.lng)};
            //console.log(stone);
            rovPath.push(stone);//add each 'stone' object to the rov path array
        }


        // Create the polyline and add the symbol to it via the 'icons' property.
        //  Make line global
        line = new google.maps.Polyline({
                path: rovPath,//the path from survey model
                strokeColor: '#FF0000',
                strokeWeight: 2,
                strokeOpacity: 1,
            icons: [{
                icon: lineSymbol,
                offset: '0%',//at percent point
            }],
            map: map
           });

        }


    // Use the DOM setInterval() function to change the offset of the symbol at fixed intervals.
    function animateCircle(line) {

        var timePlayed = player.getCurrentTime();//get current time from video

        console.log("time played: "+timePlayed);

        percent = 0;

        //if time played > 1 second recalculate percent complete for animation:
        if(timePlayed > 1.0){
            percent = timePlayed * 100 / duration;
            console.log("re-calc percent %: "+percent);
        }

        //make startAnimation global so can call from youtube buttons
            startAnimation = window.setInterval(function() {

                 //animation increment iteration (duration * ten to account for .1 setInterval loop)
                percent = percent + (100 / (duration * 10));

                console.log("animation %"+percent);

                if(percent > 99.99){
                    window.clearInterval(startAnimation);//stop animation
                    console.log("animation end");
                }

            var icons = line.get('icons');
            icons[0].offset = percent + '%';//set icon % on line (0% percent ==> 100% end)
                // console.log(percent);
            line.set('icons', icons);
        }, 100);//the repeating interval (.1 seconds)
    }

    //=== YouTube ===========================================================

    // 2. This code loads the IFrame Player API code asynchronously.

    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player) after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '315',
            width: '100%',
            playerVars: {
                'controls': 0//does not remove controls fully!
            },
            videoId: '@Html.Raw(Model.Holland.VideoUrl)',
            events: {
                'onReady': setDuration,
                'onStateChange': onPlayerStateChange
            }
        });

    }

    //set duration for animation once when video 'player' ready:
    function setDuration(){

        duration = player.getDuration();
        console.log("Video duration:"+duration);

    }

    //catch buffering events and re-calc percentage animation
    function onPlayerStateChange(event){

        if(event.data == YT.PlayerState.BUFFERING){

            var resetTime = player.getCurrentTime();

            if(resetTime > 1.0 ) {
                percent = resetTime * 100 / duration;
                console.log("buffering %" + percent);
            }
        }

    }

    //=== Custom Buttons ================================================

    //my play button:
    $("#play").click(function() {

        player.playVideo();
        animateCircle(line);

    });

    //my stop button:
    $("#stop").click(function() {

        player.stopVideo();
        window.clearInterval(startAnimation);

    });

    //my pause button:
    $("#pause").click(function() {

        player.pauseVideo();
        window.clearInterval(startAnimation);

    });
    
</script>

<!-- Replace the value of the key parameter with your own API key. -->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDVHiK8K4NbQ01iqcB9GaSbkp1DLWGZNvM&callback=initMap">
</script>




